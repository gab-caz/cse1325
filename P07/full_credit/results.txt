====================
HOMEWORK P07 RESULTS
====================

Fall 2024


FULL CREDIT
===========

NOTE: These are measurements which may vary plus your opinions which may vary a LOT. We won't grade for "correctness", just completeness.

QUESTION 1: What Boggle command line arguments ([#boards] and if not default [boardSize]) did you use to achieve a 30 to 45 second runtime? Note: We're only interested in the "real" seconds for this question.

In order to achieve the 30-45 second runtime, I used: time java Boggle 100 which gave me 35.634s real time.

_____________________________________________________________________________________________________________________________________________________________
QUESTION 2: Provide the full output (including the time command) for your program, with 1 to 16 threads. **Ensure that the result is the same for all 16 runs.** With bash, you can run all of these with a single command if you like, replacing "90" with whatever Boggle command line arguments you identified in QUESTION 1: 

for i in {1..16} ; do echo ; echo $i Threads; time java Boggle 90 - $i ; done

$ for i in {1..16} ; do echo ; echo $i Threads; time java Boggle 100 - $i ; done

1 Threads

Found 36804 solutions
Hash is 0xB0967FFA

real    0m15.601s
user    0m0.000s
sys     0m0.015s

2 Threads

Found 36804 solutions
Hash is 0xB0967FFA

real    0m8.152s
user    0m0.000s
sys     0m0.000s

3 Threads

Found 36804 solutions
Hash is 0xB0967FFA

real    0m6.280s
user    0m0.000s
sys     0m0.000s

4 Threads

Found 36804 solutions
Hash is 0xB0967FFA

real    0m5.547s
user    0m0.000s
sys     0m0.015s

5 Threads

Found 36804 solutions
Hash is 0xB0967FFA

real    0m5.172s
user    0m0.016s
sys     0m0.000s

6 Threads

Found 36804 solutions
Hash is 0xB0967FFA

real    0m5.295s
user    0m0.031s
sys     0m0.000s

7 Threads

Found 36804 solutions
Hash is 0xB0967FFA

real    0m5.068s
user    0m0.000s
sys     0m0.000s

8 Threads

Found 36804 solutions
Hash is 0xB0967FFA

real    0m4.746s
user    0m0.000s
sys     0m0.015s

9 Threads

Found 36804 solutions
Hash is 0xB0967FFA

real    0m4.984s
user    0m0.000s
sys     0m0.000s

10 Threads

Found 36804 solutions
Hash is 0xB0967FFA

real    0m4.719s
user    0m0.015s
sys     0m0.000s

11 Threads

Found 36804 solutions
Hash is 0xB0967FFA

real    0m4.554s
user    0m0.015s
sys     0m0.000s

12 Threads

Found 36804 solutions
Hash is 0xB0967FFA

real    0m4.834s
user    0m0.000s
sys     0m0.015s

13 Threads

Found 36804 solutions
Hash is 0xB0967FFA

real    0m5.433s
user    0m0.000s
sys     0m0.000s

14 Threads

Found 36804 solutions
Hash is 0xB0967FFA

real    0m4.500s
user    0m0.000s
sys     0m0.000s

15 Threads

Found 36804 solutions
Hash is 0xB0967FFA

real    0m5.469s
user    0m0.000s
sys     0m0.000s

16 Threads

Found 36804 solutions
Hash is 0xB0967FFA

real    0m4.942s
user    0m0.000s
sys     0m0.000s

_____________________________________________________________________________________________________________________________________________________________
QUESTION 3: Does adding more threads continue to speed up the program? Do more threads ever slow down the program slightly?  Why or why not?

Yes, adding more threads sped up the program, as shown with the 15.601s real time for 1 thread versus the 4.942s real time for 16 threads.
And yes, there are several instances where the time slows down, first seen after the 5th thread and fluctuates from 4s to 5s from there.
This could be because of the synchronized methods used for the boards and solutions, since in synchronization only one thread will be executed at a time and the others will wait their turn.

_____________________________________________________________________________________________________________________________________________________________
QUESTION 4: Does adding more threads increase the "system load", or is it constant regardless of the number of threads?  Why?

Yes, there were a few instances of 0.015s system load at thread 1, 4, 8, and 12. Which is a bit consistent, and that could be from my laptop and its OS management having to do lots of tasks at once or its CPU limitations.